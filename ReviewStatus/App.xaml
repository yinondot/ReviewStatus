<Application x:Class="ReviewStatus.App" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:ReviewStatus" xmlns:ComponentModel="clr-namespace:System.ComponentModel;assembly=PresentationFramework"  StartupUri="MainWindow.xaml">
  <Application.Resources>
    <Style x:Key="btnSimple" TargetType="{x:Type Button}">
      <Setter Property="Width" Value="80" />
      <Setter Property="Height" Value="40" />
      <Setter Property="Margin" Value="30,10,10,10" />
      <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>

    <Style x:Key="lblSimple" TargetType="{x:Type Label}">
      <Setter Property="Height" Value="40" />
      <Setter Property="Margin" Value="30,10,30,10" />
      <Setter Property="HorizontalAlignment" Value="Left" />
      <Setter Property="HorizontalContentAlignment" Value="Left" />
      <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <Style x:Key="tblSimple" TargetType="{x:Type TextBlock}">
      <Setter Property="Height" Value="40" />
      <Setter Property="Margin" Value="30,10,30,0" />
      <Setter Property="HorizontalAlignment" Value="Left" />
      <Setter Property="VerticalAlignment" Value="Bottom" />
      <!--<Setter Property="HorizontalContentAlignment" Value="Left" />
      <Setter Property="VerticalContentAlignment" Value="Center" />-->
    </Style>

    <Style x:Key="cbSimple" TargetType="{x:Type ComboBox}">
      <Setter Property="FlowDirection" Value="LeftToRight" />
      <!--<Setter Property="Width" Value="120" />-->
      <Setter Property="Height" Value="30" />
      <Setter Property="Margin" Value="30,10,20,10" />
      <Setter Property="HorizontalAlignment" Value="Stretch" />
      <Setter Property="VerticalContentAlignment" Value="Center" />
      <Setter Property="HorizontalContentAlignment" Value="Center" />
    </Style>


    <Style x:Key="cbItemSimple" TargetType="{x:Type ComboBoxItem}">
   <Setter Property="HorizontalAlignment" Value="Stretch" />
      <!--<Setter Property="VerticalContentAlignment" Value="Center" />
      <Setter Property="Width" Value="{Binding Width, RelativeSource={RelativeSource Mode=FindAncestor,   AncestorType={x:Type ComboBox}} }" />-->
    </Style>

    <Style x:Key="tbSimple" TargetType="{x:Type TextBox}">
      <Setter Property="Height" Value="30" />
      <Setter Property="Margin" Value="30,10,20,10" />
      <Setter Property="MaxLength" Value="20" />
      <Setter Property="HorizontalAlignment" Value="Stretch" />
      <Setter Property="VerticalContentAlignment" Value="Center" />
      <Setter Property="HorizontalContentAlignment" Value="Center" />
    </Style>


    <Style x:Key="ckbSimple" TargetType="{x:Type CheckBox}">
      <Style.Resources>
        <Style TargetType="{x:Type Path}">
          <Setter Property="FlowDirection" Value="LeftToRight" />
        </Style>
        <!--<Style TargetType="{x:Type Grid}">
          <Setter Property="Background" Value="Green" />
        </Style>-->
      </Style.Resources>
      <Style.Triggers>
        <Trigger Property="ComponentModel:DesignerProperties.IsInDesignMode" Value="True">
          <Setter Property="IsChecked" Value="True"/>
        </Trigger>
      </Style.Triggers>
      <Setter Property="Height" Value="30" />
      <Setter Property="Margin" Value="30,10,20,10" />
      <Setter Property="HorizontalAlignment" Value="Stretch" />
      <Setter Property="VerticalContentAlignment" Value="Center" />
      <Setter Property="HorizontalContentAlignment" Value="Left" />
    </Style>

    <Style x:Key="gbSimple" TargetType="{x:Type GroupBox}">
    
      <Setter Property="Margin" Value="10,0,10,10" />
      <Setter Property="HorizontalAlignment" Value="Stretch" />
      <Setter Property="VerticalContentAlignment" Value="Center" />
      <Setter Property="HorizontalContentAlignment" Value="Center" />
    </Style>
        <ControlTemplate x:Key="CheckBoxControlTemplate1" TargetType="{x:Type CheckBox}">
            <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                    <Grid x:Name="markGrid">
                        <Path x:Name="optionMark" Data="F1M9.97498,1.22334L4.6983,9.09834 4.52164,9.09834 0,5.19331 1.27664,3.52165 4.255,6.08833 8.33331,1.52588E-05 9.97498,1.22334z" Fill="#FF212121" Margin="1" Opacity="0" Stretch="None" />
                        <Rectangle x:Name="indeterminateMark" Fill="#FF212121" Margin="2" Opacity="0" />
                    </Grid>
                </Border>
                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="HasContent" Value="True">
                    <Setter Property="FocusVisualStyle">
                        <Setter.Value>
                            <Style>
                                <Setter Property="Control.Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2" />
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Padding" Value="4,-1,0,0" />
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" TargetName="checkBoxBorder" Value="#FFF3F9FF" />
                    <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#FF5593FF" />
                    <Setter Property="Fill" TargetName="optionMark" Value="#FF212121" />
                    <Setter Property="Fill" TargetName="indeterminateMark" Value="#FF212121" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" TargetName="checkBoxBorder" Value="#FFE6E6E6" />
                    <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#FFBCBCBC" />
                    <Setter Property="Fill" TargetName="optionMark" Value="#FF707070" />
                    <Setter Property="Fill" TargetName="indeterminateMark" Value="#FF707070" />
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" TargetName="checkBoxBorder" Value="#FFD9ECFF" />
                    <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#FF3C77DD" />
                    <Setter Property="Fill" TargetName="optionMark" Value="#FF212121" />
                    <Setter Property="Fill" TargetName="indeterminateMark" Value="#FF212121" />
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Opacity" TargetName="optionMark" Value="1" />
                    <Setter Property="Opacity" TargetName="indeterminateMark" Value="0" />
                </Trigger>
                <Trigger Property="IsChecked" Value="{x:Null}">
                    <Setter Property="Opacity" TargetName="optionMark" Value="0" />
                    <Setter Property="Opacity" TargetName="indeterminateMark" Value="1" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

    </Application.Resources>
</Application>
